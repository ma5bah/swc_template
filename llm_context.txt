
############################  LLM_CONTEXT_DIRECTIVE  ############################
## COMPREHENSIVE CODEBASE  – MERGED, AUTHORITATIVE SOURCE OF TRUTH
##  Files        : 5
##  Tokens (≈)   : 407
##  Generated    : 2025-08-06T12:02:27Z
###############################################################################

You are reading the **one-true, merged code drop** for this project.  
Assume nothing exists outside this file.
━━━━━━━━━━━━━━━━ FILE DELIMITERS ━━━━━━━━━━━━━━━━  
    <<< FILE: path/to/file.ext >>>    …    <<< END FILE >>>
━━━━━━━━━━━━━━━━ FILE ORDER ━━━━━━━━━━━━━━━━  
1. Entry points  
2. Configuration / env  
3. Core implementation (alphabetical)
4. Tests & fixtures  
───────────────────────── HARD RULES (NON-NEGOTIABLE) ─────────────────────────
1. Wrapper integrity – Never delete, nest, or reorder the <<< FILE … >>> /
    <<< END FILE >>> markers. Everything between one pair is that file.
2. **Duplicate filenames** – If a path occurs multiple times, **KEEP ONLY** the
    final occurrence; earlier versions are obsolete and must be ignored.  
    • **Special case:** `llm_context.txt` is itself one of the wrapped files.
    If it appears more than once, **use only the last instance**.
3. **Source-bounded reasoning** – Do **not** hallucinate or invent code.  
    If it is not inside the wrappers, it does not exist.
4. **Quoting & citing** – When referring to code, always name the *exact* file
    path (line numbers optional but helpful).
5. **No structural drift** – Do **not** rename, split, or shuffle files unless
    explicitly told. Preserve imports, comments, and formatting verbatim when
    copying snippets.
6. Scope of edits – Work exclusively on the most recent version of each file.
7. Patch delivery
    • For every edited file, return the entire updated file, wrapped as shown below.
    • Snippets or diffs are not allowed.
    • Explanations alone must not alter code blocks.
    Language-specific wrappers
    ─────────────
    // <<< FILE: path/to/file.ext >>>    …    <<< END FILE >>> (JS, TS, Java, C#, C++, etc.)
    ### <<< FILE: path/to/file.ext >>>    …    <<< END FILE >>>  (Python, etc.)
    <!-- <<< FILE: path/to/file.ext >>>    …    <<< END FILE >>> --> (HTML, etc.)
    /* <<< FILE: path/to/file.ext >>>    …    <<< END FILE >>> */ (CSS / SCSS, etc.)
    -- <<< FILE: path/to/file.ext >>>    …    <<< END FILE >>> -- (SQL, etc.)
    ─────────────
8. Context preservation – If content is omitted for brevity, indicate it with:
    ... [TRUNCATED: X lines] ...
9. Always use Canvas for code blocks, and ensure that the code is formatted
    correctly with proper syntax highlighting for the file type.

──────────────────────────────── END OF RULES ────────────────────────────────


### PROJECT STRUCTURE & ANALYSIS
IDX │ FILE PATH                                                │ TYPE       │ LINES │ TOKENS │ PRIORITY
────┼──────────────────────────────────────────────────────────┼────────────┼───────┼────────┼─────────
  1 │ .swcrc                                                   │ unknown    │    30 │    118 │       0
  2 │ package.json                                             │ unknown    │    31 │    113 │      40
  3 │ tsconfig.json                                            │ unknown    │    40 │    154 │      10
  4 │ src/main.ts                                              │ unknown    │     3 │      9 │     105
  5 │ src/dir/hello.ts                                         │ unknown    │     4 │     13 │       5

<<< FILE: .swcrc >>>
# Metadata: type=text, lines=30, tokens≈118
# ────────────────────────────────────────────────────────────
{
  "$schema": "https://swc.rs/schema.json",

  "jsc": {
    "parser": { "syntax": "typescript", "tsx": true, "decorators": false },
    "target": "es2022",
    "loose": false,
    "externalHelpers": true,                 // shared helpers = smaller output
    "keepClassNames": false,
    "baseUrl": ".",
    "paths": { "@/*": ["src/*"] }
  },

//   "env": {                                   // polyfill only when used
//     "targets": { "node": "18" },             // matches current LTS
//     "mode": "usage",
//     "coreJs": "3.36"
//   },

  "module": { "type": "commonjs", "strictMode": true, "lazy": false, "noInterop": false },

  "sourceMaps": "inline",
  "minify": false,                           // flip to true in a `.swcrc.prod`
  "exclude": [
    "\\.spec\\.[jt]s$",
    "\\.test\\.[jt]s$",
    "^dist/"
  ]
}
<<< END FILE >>>

<<< FILE: package.json >>>
# Metadata: type=text, lines=31, tokens≈113
# ────────────────────────────────────────────────────────────
{
  "name": "swc_template",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "module",        
  "engines": { "node": ">=18" },
  "scripts": {
    "dev":   "nodemon --watch src --ext ts --exec \"node -r @swc/register src/index.ts\"",
    "build": "swc src -d dist --copy-files",
    "build:prod": "swc src -d dist --copy-files --config-file .swcrc.prod",
    "type-check": "tsc -p tsconfig.json --noEmit",
    "start": "node dist/index.js",
    "lint": "eslint \"src/**/*.{ts,tsx}\" --max-warnings 0",
    "format": "prettier --write \"src/**/*.{ts,tsx,json,md}\""
  },
  "devDependencies": {
    "@swc/cli": "^0.7.7",
    "@swc/core": "^1.12.1",
    "@swc/helpers": "^0.5.3",
    "@swc/register": "^0.1.9",
    "typescript": "^5.5.0",
    "nodemon": "^3.0.3",
    "eslint": "^8.58.0",
    "prettier": "^3.4.0"
  }
}
<<< END FILE >>>

<<< FILE: tsconfig.json >>>
# Metadata: type=text, lines=40, tokens≈154
# ────────────────────────────────────────────────────────────
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Node 18 + SWC",

  "compilerOptions": {
    /* language & emit ----------------------------------------------------- */
    "target": "ES2022",
    "module": "NodeNext",            // keeps import/export in .ts for tooling
    "moduleResolution": "NodeNext",
    "outDir": "dist",
    "rootDir": "src",
    "lib": ["ES2022"],
    "allowJs": true,     // ← Add this
    "checkJs": false,    // ← Add this (optional)

    /* interoperability ---------------------------------------------------- */
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "resolveJsonModule": true,

    /* decorators (still disabled in .swcrc) ------------------------------- */
    "experimentalDecorators": false,
    "emitDecoratorMetadata": false,

    /* strictness & speed -------------------------------------------------- */
    "strict": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "incremental": true,             // caching speeds up `tsc --noEmit`
    "noEmit": true,                  // SWC handles JS emit

    /* path alias mirrors .swcrc ------------------------------------------ */
    "baseUrl": ".",
    "paths": { "@/*": ["src/*"] }
  },

  "include": ["src/**/*.ts"],
  "exclude": ["dist", "**/*.spec.ts", "**/*.test.ts"]
}
<<< END FILE >>>

<<< FILE: src/main.ts >>>
# Metadata: type=text, lines=3, tokens≈9
# ────────────────────────────────────────────────────────────
import { hello } from "@/dir/hello.js";

hello();
<<< END FILE >>>

<<< FILE: src/dir/hello.ts >>>
# Metadata: type=text, lines=4, tokens≈13
# ────────────────────────────────────────────────────────────
export const hello = () => {
  console.log("Hello, world!");
};
<<< END FILE >>>

<<< END OF MERGED CONTEXT >>>
# Summary: 5 files processed, 0 truncated
